source('~/Documents/projects/machine-learning-labs/Lab-2-block-2/assignment1.R', echo=TRUE)
#read data
library(readxl)
data <- read_excel("spambase.xlsx")
#read data
library(readxl)
data <- read_excel("influenza.xlsx")
#read data
library(readxl)
data <- read_excel("influenza.xlsx")
View(data)
plot.ts(data)
plot.ts(Mortality)
plot.ts(data$Mortality)
plot.ts(data$Mortality, ylab="Morality" )
plot.ts(data$Mortality, data$Influenza, ylab="Morality" )
ts.plot(ts(data$Mortality), ts(data$Influenza), col=1:2)
meltdf <- melt(df,id="Year"
meltdf <- melt(df,id="Year")
meltdf <- melt(data,id="Year")
library(reshape2)
meltdf <- melt(data,id="Year")
View(meltdf)
library(mgcv)
library(mgcv)
View(data)
2/sqrt(121)
0.8^2
0.8* 0.
0.8* 0.8
-0.64 + 0.5
1 - 0.64
0.14 / 0.36
0.5 + 0.38
0.88 / 0.8
data1 <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE)
data_email <- as.data.frame(data1)
data_email$Conference <- as.factor(data1$Conference)
n=dim(data_email)[1]
set.seed(12345)
# 70% Training Data
id=sample(1:n, floor(n*0.7))
train=data_email[id,]
# 30% validation & testing Data
test = data_email[-id,]
data1 <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE)
data_email <- as.data.frame(data1)
data_email <- as.data.frame(data1)
data1 <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE)
data1 <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"", dec = ",", fill = TRUE)
data1 <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"", dec = ",", fill = TRUE)
data1 <- read.csv("data.csv", header = TRUE, sep = ";", quote = "\"", dec = ",", fill = TRUE)
data1 <- read.csv("data.csv", header = TRUE, sep = ";", quote = "\"", dec = ",")
data1 <- read.csv2("data.csv", header = TRUE)
data1 <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE)
data1 <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
data_email <- as.data.frame(data1)
data_email$Conference <- as.factor(data1$Conference)
n=dim(data_email)[1]
set.seed(12345)
# 70% Training Data
id=sample(1:n, floor(n*0.7))
train=data_email[id,]
# 30% validation & testing Data
test = data_email[-id,]
library(pamr)
install.packages("pamr")
# 30% validation & testing Data
test = data_email[-id,]
library(pamr)
rownames(train) <- 1:nrow(train)
which(colnames(train)=="Conference")
x <- t(train[,-4703])
y <- train[[4703]]
mydata <- list(x=x, y= as.factor(y), geneid=as.character(1:nrow(x)),genenames = rownames(x))
model_train <- pamr.train(mydata)
cv_model <- pamr.cv(model_train, data = mydata)
pamr.plotcv(cv_model) # legend is not shown in plot and only 2 lines are drawn why?
pamr.plotcv(cv_model) # legend is not shown in plot and only 2 lines are drawn why?
pamr.plotcv(cv_model) # legend is not shown in plot and only 2 lines are drawn why?
print(cv_model)
model_train <- pamr.train(mydata, threshold = cv_model$threshold[which.min(cv_model$error)])
pamr.plotcen(model_train, mydata, threshold = cv_model$threshold[which.min(cv_model$error)])
features = pamr.listgenes(model_train, mydata, threshold = 1.306, genenames=TRUE)
cat( paste( colnames(train)[as.numeric(features[1:10,1])], collapse='\n' ) )
pamr.confusion(cv_model, threshold = 1.306)
library(glmnet)
set.seed(12345)
response <- train$Conference
predictors <- as.matrix(train[,-4703])
elastic_model <- glmnet(x=predictors,y=response,family = "binomial",alpha = 0.5)
cv.fit <- cv.glmnet(x=predictors,y=response,family="binomial",alpha = 0.5)
cv.fit$lambda.min
elastic_model <- glmnet(x=predictors,y=response,family = "binomial",alpha = 0.5,
lambda = cv.fit$lambda.min)
par(mar=c(2,2,2,2))
plot(cv.fit)
plot(elastic_model)
plot(elastic_model)
elastic_model
plot(elastic_model)
elastic_model
summary(pamr)
summary(elastic_model)
elastic_model <- glmnet(x=predictors,y=response,family = "binomial",alpha = 0.5)
par(mar=c(2,2,2,2))
plot(cv.fit)
plot(elastic_model)
cv.fit$lambda.min
data <- read.csv2("data.csv", header = TRUE, sep = ";", quote = "\"",
dec = ",", fill = TRUE, check.names = FALSE)
data1 <- as.data.frame(data)
data_email <- as.data.frame(data)
data_email$Conference <- as.factor(data$Conference)
n=dim(data_email)[1]
set.seed(12345)
# 70% Training Data
id=sample(1:n, floor(n*0.7))
train=data_email[id,]
# 30% validation & testing Data
test = data_email[-id,]
library(pamr)
pvals <- c()
for (i in 1:length(data1)) {
ttest <- t.test(data1[i], data = data1, alternative = "two.sided")
pvals[i] <- ttest$p.value
}
pvalues <- sort(pvals,decreasing = FALSE)
#BH = p.adjust(pvals, "BH")
ALPHA <- 0.05
L <- c()
it <- 1
# Let alpha = 0.05  ## ask oleg
for (j in 1:length(pvalues)) {
if(pvalues[j] < ALPHA * (j/length(pvalues)) )
{
L[it] <- j
it <- it +1
}
}
L
L = max(L)
L
newPvalues <- c()
pvalue_index <- c()
pvalue_status <- c()
for (j in 1:length(pvalues))
{
newPvalues[j] <- pvalues[j]
pvalue_index <- j
pvalue_status <- "Accept"
if(pvalues[j] <= pvalues[L])
{
pvalue_status <- "Reject"
}
}
result <- data.frame(p-value=newPvalues, index=pvalue_index,status=pvalue_status)
result <- data.frame(p_value=newPvalues, index=pvalue_index,status=pvalue_status)
result
debugSource('~/Documents/projects/machine-learning-labs/Lab-2-block-2/assignment 2.R')
debugSource('~/Documents/projects/machine-learning-labs/Lab-2-block-2/assignment 2.R')
debugSource('~/Documents/projects/machine-learning-labs/Lab-2-block-2/assignment 2.R')
pvalues[302]
pvalues
pvalues[302] > pvalues
pvalues[302] => pvalues
pvalues[302] >= pvalues
debugSource('~/Documents/projects/machine-learning-labs/Lab-2-block-2/test.R')
debugSource('~/Documents/projects/machine-learning-labs/Lab-2-block-2/test.R')
debugSource('~/Documents/projects/machine-learning-labs/Lab-2-block-2/test.R', echo=TRUE)
debugSource('~/Documents/projects/machine-learning-labs/Lab-2-block-2/test.R')
